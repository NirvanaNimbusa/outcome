/* Example of Outcome used with policies
(C) 2017 Niall Douglas <http://www.nedproductions.biz/> (149 commits)


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "../../../include/boost/outcome.hpp"

#include <iostream>

using namespace BOOST_OUTCOME_V2_NAMESPACE;

//! [blank]
struct blank_policy
{
  //! Performs a narrow check of state, used in the assume_value() functions.
  template <class Impl> static constexpr void narrow_value_check(Impl &&self) noexcept;

  //! Performs a narrow check of state, used in the assume_error() functions.
  template <class Impl> static constexpr void narrow_error_check(Impl &&self) noexcept;

  //! Performs a wide check of state, used in the value() functions.
  template <class Impl> static constexpr void wide_value_check(Impl &&self);

  //! Performs a wide check of state, used in the error() functions.
  template <class Impl> static constexpr void wide_error_check(Impl &&self);


  /******** These only used if the policy is used in Outcome ********/

  //! Performs a narrow check of state, used in the assume_exception() functions.
  template <class Impl> static constexpr void narrow_exception_check(Impl &&self) noexcept;

  //! Performs a wide check of state, used in the exception() functions.
  template <class Impl> static constexpr void wide_exception_check(Impl &&self);
};
//! [blank]

using MyOutcomeType = outcome<int>;

//! [cast]
template <class T, class EC, class E> struct outcome_policy
{
  /*! Performs a wide check of state, used in the value() functions.

  \effects If outcome does not have a value, if it has an exception it rethrows it via `std::rethrow_exception()`,
  if has an error it throws a `std::system_error(error())`, else it throws `bad_outcome_access`.
  */
  template <class Impl> static constexpr void wide_value_check(const Impl &self)
  {
    // All of the have_*() state check functions are always present in all Impl types
    if(!self.have_value())
    {
      if(self.have_exception())
      {
        // .value() is implemented by the result part of Outcome. It knows nothing
        // of outcome's .exception(), so we need to cast to the derived type first.
        const MyOutcomeType &_self = static_cast<const MyOutcomeType &>(self);

        // Note this will invoke narrow_exception_check() in this policy
        std::rethrow_exception(_self.assume_exception());
      }
      if(self.have_error())
      {
        throw std::system_error(make_error_code(self.assume_error()));
      }
      throw bad_outcome_access("no value");
    }
  }
};
//! [cast]

int main()
{
  return 0;
}